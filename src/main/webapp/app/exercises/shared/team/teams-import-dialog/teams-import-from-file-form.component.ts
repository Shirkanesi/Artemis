import { ChangeDetectorRef, Component, EventEmitter, Output } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { User } from 'app/core/user/user.model';
import { StudentWithTeam } from 'app/entities/team.model';
import { Team } from 'app/entities/team.model';
import { shortNamePattern } from 'app/shared/constants/input.constants';

@Component({
    selector: 'jhi-teams-import-from-file-form',
    templateUrl: './teams-import-from-file-form.component.html',
    styleUrls: ['./teams-import-from-file-form.component.scss'],
})
export class TeamsImportFromFileFormComponent {
    @Output() teamsChanged = new EventEmitter<Team[]>();
    sourceTeams?: Team[];
    importedTeams: StudentWithTeam[] = [];
    importFile?: Blob;
    importFileName: string;
    loading: boolean;

    constructor(private changeDetector: ChangeDetectorRef, private translate: TranslateService) {}

    /**
     * Move file reader creation to separate function to be able to mock
     * https://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript/
     */
    generateFileReader() {
        return new FileReader();
    }

    /**
     * Converts teams from file to expected team type
     * @param {FileReader} $fileReader object that is generated by generateFileReader
     */
    onFileLoadImport(fileReader: FileReader) {
        try {
            if (this.importFile?.type === 'json') {
                // Read the file and get list of teams from the file
                this.importedTeams = JSON.parse(fileReader.result as string) as StudentWithTeam[];
            } else if (this.importFile?.type === 'csv') {
                this.importedTeams = this.parseCsvFile(fileReader.result as string);
            } else {
                throw new Error(this.translate.instant('artemisApp.team.invalidFileType', { fileType: this.importFile?.type }));
            }
            this.sourceTeams = this.convertTeams(this.importedTeams);
            this.teamsChanged.emit(this.sourceTeams);
            this.loading = false;
            // Clearing html elements,
            this.importFile = undefined;
            this.importFileName = '';
            const control = document.getElementById('importFileInput') as HTMLInputElement;
            if (control) {
                control.value = '';
            }
        } catch (e) {
            this.loading = false;
            const message = `${this.translate.instant('artemisApp.team.errors.importFailed')} ${e}`;
            alert(message);
        }
    }

    /**
     * Assigns the uploaded import file
     * @param event object containing the uploaded file
     */
    setImportFile(event: any): void {
        if (event.target.files.length) {
            const fileList: FileList = event.target.files;
            this.importFile = fileList[0];
            this.importFileName = this.importFile['name'];
            this.loading = true;
        }
        if (!this.importFile) {
            return;
        }
        const fileReader = this.generateFileReader();
        fileReader.onload = () => this.onFileLoadImport(fileReader);
        fileReader.readAsText(this.importFile);
        this.changeDetector.detectChanges();
    }

    /**
     * Parse the content of a csv file to students with teams
     * @param content All lines of the csv file
     */
    parseCsvFile(content: string): StudentWithTeam[] {
        const lines = content.split('\n');
        if (lines.length < 2) {
            return [];
        }
        const header = lines[0].split(',').map((p) => p.trim().toLowerCase());
        const expectedHeader = ['last name', 'first name', 'registration number', 'username', 'team name'];
        if (header !== expectedHeader) {
            throw new Error(this.translate.instant('artemisApp.team.invalidCsvHeader', { expectedHeader: expectedHeader.join(',') }));
        }
        const studentsWithTeams: StudentWithTeam[] = [];
        for (let i = 1; i < lines.length; i++) {
            const options = lines[i].split(',').map((p) => p.trim());
            if (options.length !== 5) {
                throw new Error(this.translate.instant('artemisApp.team.invalidCsvLine', { line: i + 1 }));
            }
            const studentWithTeam = new StudentWithTeam();
            studentWithTeam.lastName = options[0].length ? options[0] : undefined;
            studentWithTeam.firstName = options[1].length ? options[1] : undefined;
            studentWithTeam.registrationNumber = options[2].length ? options[2] : undefined;
            studentWithTeam.username = options[3].length ? options[3] : undefined;
            studentWithTeam.teamName = options[3];
            studentsWithTeams.push(studentWithTeam);
        }
        return studentsWithTeams;
    }

    /**
     * Convert imported team list to normal teams
     */
    convertTeams(importTeam: StudentWithTeam[]): Team[] {
        const teams: Team[] = [];
        let entryNr = 1;
        importTeam.forEach((student) => {
            const newStudent = new User();
            newStudent.firstName = student.firstName ?? '';
            newStudent.lastName = student.lastName ?? '';
            newStudent.visibleRegistrationNumber = student.registrationNumber;
            newStudent.login = student.username;

            if ((typeof student.username !== 'string' || !student.username.trim()) && (typeof student.registrationNumber !== 'string' || !student.registrationNumber.trim())) {
                throw new Error(this.translate.instant('artemisApp.team.missingUserNameOrId', { entryNr }));
            }
            newStudent.name = `${newStudent.firstName} ${newStudent.lastName}`.trim();

            if (typeof student.teamName !== 'string' || !student.teamName.trim()) {
                throw new Error(this.translate.instant('artemisApp.team.teamName.missingTeamName', { entryNr, studentName: newStudent.name }));
            }

            const shortName = student.teamName.replace(/[^0-9a-z]/gi, '').toLowerCase();
            if (!shortName.match(shortNamePattern)) {
                throw new Error(this.translate.instant('artemisApp.team.teamName.pattern', { entryNr, teamName: shortName }));
            }

            const index = teams.findIndex((team) => team.name === student.teamName);
            if (index === -1) {
                const newTeam = new Team();
                newTeam.name = student.teamName;
                newTeam.shortName = shortName;
                newTeam.students = [newStudent];
                teams.push(newTeam);
            } else {
                teams[index].students = [...teams[index].students!, newStudent];
            }
            entryNr++;
        });
        return teams;
    }
}
